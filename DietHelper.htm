<html>
<head>
<title>Diet Helper</title>
<meta name="viewport" content="width=device-width, initial-scale=1">

<script>

// --------------------
const globalDebug = 0;
// --------------------

const ingredients = [ 
		// ------- ORDER ----- EMPTY MUST ALWAYS BE FIRST, others in alphabetical order

//  List_Name, List_Tooltip,
//  	kcal, fats, carb, prot, fibr
	["", "", 
		0], 
	["Bevanda mandorla bio Coop", "",
		26,    1.2,   3.3,    0,   0],
	["Bevanda riso coop", "",
		61,    1.1,    13,    0,   0],
	["Juice+ cioccolato", "1 dose = 38g",
		371, 6.9, 41, 26.9, 18],
	["Juice+ vaniglia", "1 dose = 38g",
		375, 6.4, 46, 25.3, 15],		
	["Coca cola", "",
		42,      0,   10.6,   0,   0],
	["Gall. riso Coop", "3 gallette = 25g",
		377,   1.7,     81, 7.5, 3.9],
	["Latte", "",
		48],
	["Latte mandorla condorelli", "",
		89, 3.9, 11.9, 1.5, 0],
	["Mikado Lu", "",
		485, 20, 70, 6.1, 1.8],
	["Pansoti del Levante past. il Ponte", "1 porzione = 200g",
		228, 4.2, 37.5, 7.7, 4.7],
	["Parmigiano Reggiano Ferrari", "",
		402, 30, 0, 32, 0],
	["Pistacchi tostati bio Carrefour", "",
		631, 56, 81, 18, 11],
	["Salsa di noci Past. il Ponte", "",
		541, 54.3, 4.5, 11.3, 0],
	["Togo classic latte Pavesi", "",
		509, 25, 62.7, 6.7, 3.2],
	["Zymil 'buono' Parmalat", "",
		41, 1, 4.9, 3.2, 0],
		
		
	
];


const menu = {};
var i = 0;

var kCalDay = {
	breakfast: 0,
	snackM:    0,
	lunch:     0,
	snack2:    0,
	dinner:    0
}
	

function getValue(name) { return document.getElementById(name).textContent; }

function setValue(name, value) { return document.getElementById(name).innerHTML = value; }	
	
function show(name) { document.getElementById(name).classList.remove("hidden"); }

function hide(name) { document.getElementById(name).classList.add("hidden"); }


// reads ingredients list, appends all ingredients as options to dropdown menu
function buildList(source) {
	let select = document.createElement("select");
 
	for (let i=0; i<source.length; i++) {
		let option = document.createElement("option"); 
		option.innerHTML = source[i][0];
		option.setAttribute("value", i);
		select.appendChild(option);
	}

	return select
}

function addRow(meal) {

	let parent = document.getElementById(meal);
	
	let line = document.createElement("div");
		line.setAttribute("class", "ingredient");
	
	let select = buildList(ingredients);
		select.setAttribute("class", "vertCenter");
		select.setAttribute("onchange", "setIngredientProperties()");
	
	let iMass = document.createElement("input");
		iMass.setAttribute("class", "item_mass vertCenter unselectable");
		iMass.setAttribute("type", "tel");	
		iMass.setAttribute("onkeyup", "userInput()");		
		
	let times = document.createElement("span");
		times.setAttribute("class", "smallFont vertCenter unselectable");	
		times.textContent = "x";
	
	let uKcal = document.createElement("div");
		uKcal.setAttribute("class", "unit_kcal vertCenter unselectable smallfont");
		uKcal.textContent = 0;
		
	let equal = document.createElement("span");
		equal.setAttribute("class", "smallFont vertCenter unselectable");	
		equal.textContent = "=";
	
	let iKcal = document.createElement("div");
		iKcal.setAttribute("class", "item_kcal vertCenter unselectable");	
		iKcal.textContent = 0;	
		
	let enable = document.createElement("button");
		enable.setAttribute("class", "minus smallFont unselectable");
		enable.setAttribute("onclick", "enableDelete()");
		enable.textContent = "x";
	
	let remove = document.createElement("button");
		remove.setAttribute("class"  , "delete smallFont unselectable hidden");
		remove.setAttribute("onclick", "deleteRow()");
		remove.setAttribute("onblur" , "clearDelete()");		
		remove.textContent = "x";
	
	parent.appendChild(line);
		line.appendChild(select);
		line.appendChild(iMass);
		line.appendChild(times);
		line.appendChild(uKcal);
		line.appendChild(equal);
		line.appendChild(iKcal);
		line.appendChild(enable);		
		line.appendChild(remove);
		
}

function enableDelete(){

	let caller = event.currentTarget;             // .minus button
	let row    = caller.parentNode;               // .ingredient
	let depend = row.querySelector(".delete")     // .delete button
	
	
	caller.removeAttribute("onclick");
	
	setTimeout(function(){
		caller.classList.toggle("hidden");
		depend.classList.toggle("hidden");
		depend.focus();
	},100);
}

function clearDelete(){

	let caller = event.currentTarget;             // .delete button
	let row    = caller.parentNode;               // .ingredient
	let depend = row.querySelector(".minus")      // .minus button
	
	caller.classList.toggle("hidden");
	depend.classList.toggle("hidden");
	depend.setAttribute("onclick", "enableDelete()");
}

function deleteRow() {
	
	let caller = event.currentTarget;
	let meal   = caller.parentNode.parentNode.parentNode.parentNode;
	let riga   = caller.parentNode;
	riga.parentNode.removeChild(riga);
	
	calculateMeal(meal);
}

 


function toggleBlock() {

	let caller = event.currentTarget;
	//console.log(caller);
	
	let block  = caller.parentNode.querySelector(".meal_block");
	//console.log(block);
	
	block.classList.toggle("hidden") ;
	event.currentTarget.querySelector(".arrow").classList.toggle("up");

}

function setIngredientProperties() {

	let caller     = event.currentTarget;

	let chosenIngr = caller.value;
	let activeRow  = caller.parentNode;
	let baseKcal   = activeRow.querySelector(".unit_kcal");
	
	baseKcal.textContent = ingredients[chosenIngr][2] || 0;
	
	ingredients[chosenIngr][1] 
		? setValue("footer", "<b>" + ingredients[chosenIngr][0] + ":</b> " + ingredients[chosenIngr][1])
		: setValue("footer", "");
	
	calculateIngredient(caller);
}

function userInput() {

	let caller = event.currentTarget;
	caller.focus();
	
	let temp = parseInt(caller.value);
	
	caller.value = isNaN(temp) ? 0 : temp;
	
	calculateIngredient(caller);
	
	caller.addEventListener("keydown", function(event) {
		if (event.key === "Enter") {
			caller.blur();
		}
	});
}



function setMass() {
	
	let caller = event.currentTarget;
	let meal   = caller.parentNode.parentNode.parentNode.parentNode;
	
	let value;
	let userInput = parseInt(prompt("Quantita':", ""), 10);
	
	userInput 
		? value = userInput
		: value = 0;
	
	caller.textContent = value;
	
	
	calculateIngredient(caller);
	
}

function calculateIngredient(eventCaller) {
	
	let caller;
	let meal; 
	
	console.log(eventCaller);
	
	eventCaller 
		? caller = eventCaller
		: caller = event.currentTarget;

	console.log(caller);
	meal = caller.parentNode.parentNode.parentNode.parentNode;
		
	let itemMass_id = caller.parentNode.querySelector(".item_mass");
	let unitKcal_id = caller.parentNode.querySelector(".unit_kcal");
	let itemKcal_id = caller.parentNode.querySelector(".item_kcal");
	
	mass = itemMass_id.value;
	kcal = unitKcal_id.textContent;
	
	itemKcal_id.textContent = Math.round(mass * kcal / 100); 
	
	calculateMeal(meal);
}


function calculateMeal(meal){

	let mealId;
	let mealKcalList;
	let mealKcalTot = 0;
	
	meal 
		? mealId = meal
		: mealId = event.parentNode.parentNode.parentNode.parentNode;
		
	//console.log(mealId);
	
	mealKcalList = mealId.querySelectorAll(".item_kcal")
	//console.log(mealKcalList);
	
	mealKcalList.forEach(function(el){
		mealKcalTot += parseInt(el.textContent, 10);
	});
	
	mealId.querySelector(".meal_kcal").textContent = mealKcalTot;
	
	calculateDay();
}

function calculateDay() {
	let allMealsList  = document.querySelectorAll(".meal_kcal");
	
	let allMealsValue = 0;

	allMealsList.forEach(function(el){
		allMealsValue += parseInt(el.textContent, 10);
	});	
	
	setValue("day_kcal", allMealsValue);	
}


window.onload = function(){

	addRow("breakfast_list");
	addRow("snack1_list");
	addRow("lunch_list");
	addRow("snack2_list");
	addRow("dinner_list");
};

</script>

<style>
html {
	font-size: 16px;
}

.smallFont {
	font-size: 10px;
}

body {
	background-color: #666666;
	margin: 0px;
	padding: 0px;
	font-family: arial;
}

#container {
	box-sizing: border-box;
	width:100%;
	max-width:400px;
	/*margin: 5px;*/
	padding: 5px;
	border-bottom: 3px solid black;
	position: fixed;
	top: 0px;
	bottom: 3rem;
	overflow: overlay;
}

#footer {
	box-sizing: border-box;
	width:100%;
	max-width:400px;
	padding: 5px;
	position: fixed;
	bottom: 0px;
	height: 3rem;
	overflow: hidden;
	background-color: #ccccff;
}

#menuInfo {
	margin-left:  0.25rem;
	margin-right: 0.25rem;
	height:       1.5rem;
	width:        1.5rem;
	border: 1px solid black;
	border-radius: 0.75rem;
	background-color: #5050ff;
	fill: white;
	display: flex;
}

#iconInfo{
	height: 1rem;
	width:  1rem;
	/*justify-content: center;
	align-items: center;*/
	margin: auto;
}

.meal_group {
}

.meal_header, #app_header {
	font-weight: bold;
	height: 2rem;
	display:flex;
	align-items: center;
	border: 2px solid black;
	border-radius: 2rem;
	margin-top: 0.5rem;
	margin-bottom: 0.5rem;
	background-color: #fffff0;
}

.meal_header {
	margin-right: 2rem;
}

#app_header {
	font-variant: small-caps;
}

.meal_name, #app_name {
	display: inline-block;
	margin-left: 1rem;
	margin-right: 1rem;
	width: 4rem;
	flex-grow: 1;
}

#app_name {
	color: blue;
	font-size: larger;
	font-style: italic;
}



.arrow {
	width:  1.2em;
	height: 0.7em;
}

.up {
    -ms-transform: rotate(180deg); /* IE 9 */
    -webkit-transform: rotate(180deg); /* Safari */
    transform: rotate(180deg);
}

.ingredient {
	margin-top: 0.5rem;
	margin-bottom: 0.5rem;
	margin-left: 0.5rem;
	height:2em;
	display:flex;
	align-items: center;
}

select {
	flex-grow: 1;
	box-sizing: border-box;
	display: inline-block;
	height: 2em;
	width: 4em;
	margin-left: 0.5em;
	margin-right: 0.5em;
	font-size: 10px;
}

.item_mass, .unit_kcal, .item_kcal, .meal_kcal, #day_kcal {
	box-sizing:border-box;
	display: flex;
	width: 3rem;
	height: 1.5rem;
	padding-left:  2px;
	padding-right: 2px;
	border-width: 1px;
	border-style: solid; 
	border-radius: 1rem;
	justify-content: flex-end;
	align-items: center;
	overflow: hidden;
}

.item_mass, .unit_kcal, .item_kcal, .meal_kcal {
	margin-left: 0.25rem;
	margin-right:0.25rem;
}

#day_kcal {
	margin-left: 0.25rem;
	margin-right:0.25rem;
}


.item_mass, select {
	background-color: #ffffaa;
}

.unit_kcal, .item_kcal, .meal_kcal, #day_kcal {
	background-color: #cccccc;
}

.item_mass, .unit_kcal, .item_kcal, .meal_kcal {
	border-color: black;
}

#day_kcal {
	border-color: blue;
}


button {
	box-sizing: border-box; 
	border-width:2px;
	border-style: solid;

	padding:0px;
	text-align:center;
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}
	
.plus {
	border-color: green;
	border-radius: 0.75em;
	height: 1.5em;
	width:  4rem;
	margin-left: 4rem;
	background-color: #aaffaa;
}

.minus, .delete {
	border-color: red;
	border-radius: 50%;
	color: red;
}

.minus {
	height: 1rem;
	width:  1rem;
	margin-right: 0.5rem;
	margin-left:  0.5rem;
	background-color: #ffaaaa;
	color: red;
}

.delete {
	height: 1.5rem;
	width:  1.5rem;
	margin-right: 0.25rem;
	margin-left:  0.25rem;
	background-color: #ff0000;
	color: white;
}

.hidden {
	display: none               !important;
}

.vertCenter {
	margin-top: auto;
	margin-bottom:auto;
}

.deleteRowIcon {
	height: 1.5em;
	width: 1.5em;
}

.arrow {
	width:  1.2em;
	height: 0.7em;
}

.up {
    -ms-transform: rotate(180deg); /* IE 9 */
    -webkit-transform: rotate(180deg); /* Safari */
    transform: rotate(180deg);
}

.unselectable {
	user-select: none;
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
}


#infoFrame {
	display: flex;
	position: fixed;
	z-index: 1000;
	top: 0px;
	bottom: 0px;
	left: 0px;
	width: 100%;
	max-width: 400px;
	background-color: #000000b0;
}

#infobox {
	display: block;
	position: absolute;
	top: 2rem;
	bottom: 2rem;
	left: 2rem;
	right: 2rem;
	background-color: #cccccc;
	overflow-y: auto;
	padding:5px;
}

#donate {
	width:  3rem;
	height: 3rem;
	background-color: lightgreen;
	border: 1px solid black;
	border-radius: 1rem;
}

#hand {
	fill: pink;
	stroke: brown;
	stroke-linejoin: round;
	stroke-width: 2px;	
}

#coin {
	fill: gold;
	stroke: darkgoldenrod;
	stroke-linejoin: round;
	stroke-width: 1.5px;
}

</style>


</head>


<body>


<div id="container">

	<div id="app_header">
		<div class="unselectable" id="app_name">Diet Helper</div>
		<div class="unselectable" id="day_kcal"></div>
		<div id="menuInfo" onclick="show('infoFrame')">
			<svg xmlns="http://www.w3.org/2000/svg" id="iconInfo" viewBox="0 0 1024 1024">
				<path d="m640.8 12.64c40.68-5.326 85.35 9.973 106.5 47.33 28.91 51.11 12.97 122.6-40.87 156.7-41.97 26.63-98.75 28.74-137.6 0.9018-33.6-23.9-45.5-73.5-33.7-115.1 13.7-48 56.6-83.33 105.7-89.76zm23.7 330.9c22.1 55.7-5.4 119.8-25.3 174.7-35.6 97.2-104.8 279-116.7 315.4-13.7 41.6-0.4 59.4 26.3 48.8 45.6-18.5 96-98.6 131.2-124 14.4-10.4 30 13.6 23.1 29.6-27.9 64.8-138.5 161.5-225.5 199.2-48 20.8-111.2 35.8-157.3 14.8-38.9-17.5-45.9-60.9-40.4-97.4 16.3-107.1 64.7-205.3 102.8-305.6 22.03-58 64.68-156.2 68-173.3 6.1-31.3-16.2-39.1-41.1-25.7-50.4 27.2-98.4 106-125.6 123.2-15.3 9.7-31.3-7.1-28-20.8 8-33.6 84-106.4 112-129.6 74.4-61.6 140.7-75.3 187.3-79.51 41.41-3.781 92.42 7.921 109.2 50.21z"/>
			</svg>
		</div>
	</div>

<!-- BREAKFAST -->
	<div class="meal_group" id="breakfast_group">
		<div class="meal_header" onclick="toggleBlock()">
			<div class="meal_name unselectable">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="arrow up" x="0px" y="0px" viewBox="0 0 960 560" enable-background="new 0 0 960 560" xml:space="preserve">
					<path d="M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937   c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937   c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z"/>
				</svg>
				Colazione
			</div>
			<div class="meal_kcal unselectable">0</div>
		</div>

		<div class="meal_block" id="breakfast_block">
			<div id="breakfast_list"></div>
			<button class="plus unselectable" onclick="addRow('breakfast_list')">+</button>
		</div>
	</div>

	
<!-- SNACK (MORNING)-->
	<div class="meal_group" id="snack1_group">
		<div class="meal_header" onclick="toggleBlock()">
			<div class="meal_name unselectable">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="arrow up" x="0px" y="0px" viewBox="0 0 960 560" enable-background="new 0 0 960 560" xml:space="preserve">
					<path d="M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937   c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937   c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z"/>
				</svg>
				Spuntino 1
			</div>
			<div class="meal_kcal unselectable">0</div>
		</div>

		<div class="meal_block" id="snack1_block">
			<div id="snack1_list"></div>
			<button class="plus unselectable" onclick="addRow('snack1_list')">+</button>
		</div>
	</div>
	

<!-- LUNCH -->	
	<div class="meal_group" id="lunch_group">
		<div class="meal_header" onclick="toggleBlock()">
			<div class="meal_name unselectable">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="arrow up" x="0px" y="0px" viewBox="0 0 960 560" enable-background="new 0 0 960 560" xml:space="preserve">
					<path d="M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937   c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937   c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z"/>
				</svg>
				Pranzo
			</div>
			<div class="meal_kcal unselectable">0</div>
		</div>

		<div class="meal_block" id="lunch_block">
			<div id="lunch_list"></div>
			<button class="plus unselectable" onclick="addRow('lunch_list')">+</button>
		</div>
	</div>
	

<!-- SNACK (AFTERNOON)-->	
	<div class="meal_group" id="snack2_group">
		<div class="meal_header" onclick="toggleBlock()">
			<div class="meal_name unselectable">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="arrow up" x="0px" y="0px" viewBox="0 0 960 560" enable-background="new 0 0 960 560" xml:space="preserve">
					<path d="M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937   c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937   c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z"/>
				</svg>
				Spuntino 2
			</div>
			<div class="meal_kcal unselectable">0</div>
		</div>

		<div class="meal_block" id="snack2_block">
			<div id="snack2_list"></div>
			<button class="plus unselectable" onclick="addRow('snack2_list')">+</button>
		</div>
	</div>
	

<!-- DINNER-->	
	<div class="meal_group" id="dinner_group">
		<div class="meal_header" onclick="toggleBlock()">
			<div class="meal_name unselectable">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="arrow up" x="0px" y="0px" viewBox="0 0 960 560" enable-background="new 0 0 960 560" xml:space="preserve">
					<path d="M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937   c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937   c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z"/>
				</svg>
				Cena
			</div>
			<div class="meal_kcal unselectable">0</div>
		</div>

		<div class="meal_block" id="dinner_block">
			<div id="dinner_list"></div>
			<button class="plus unselectable" onclick="addRow('dinner_list')">+</button>
		</div>
	</div>
	


</div> <!-- container -->


<div class="unselectable" id="footer"></div>



<div class="hidden" id="infoFrame">

	<div class="unselectable" id="infoBox">
		<p>
		Questo programma serve a calcolare i valori nutrizionali consumati in un giorno e può funzionare sia come
		consuntivo di ciò che si è consumato, sia come preventivo di ciò che si intende consumare.
		</p>
		<p>
		L'utente deve selezionare per ogni pasto gli ingredienti (menu a tendina giallo) e inserire la quantità (celletta gialla). Il programma
		ha un database di ingredienti con i valori nutrizionali <u>normalizzati su 100g</u>. La quantità è espressa in grammi. A fondo pagina,
		quando disponibili, ci saranno informazioni aggiuntive (es.: "1 biscotto = 20g").
		</p>
		<p>
		Per aggiornamenti potete visitare il mio blog, che contiene anche una lista di tutti i programmi che ho sviluppato ad oggi:<br/>
		<a href="https://jacmoli.wordpress.com">jacmoli.wordpress.com</a>
		</p>
		<p>
		Sviluppo programmi nel mio tempo libero, ma se avete piacere di sostenermi potete farmi una donazione su Paypal. Anche l'equivalente
		di un caffè è un bel riconoscimento ;-)
		</p>
		
		<p style="text-align:center;">
			<a href="https://paypal.me/jacmoli">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="donate"  x="0px" y="0px" viewBox="-10 -5 60 60" style="enable-background:new -5 0 40.2 55;" xml:space="preserve">
					<path id="hand" d="M21.2,16c-0.5,0.1-1,0.2-1.5,0.3c-1.4,0.2-2.8,0.3-4.2,0c-0.9-0.2-1.7-0.5-2.4-1.1c0,0,0,0,0,0  c-0.3,0.5-0.6,1-1,1.5c-0.8,1.1-1.7,2-2.9,2.7c-0.5,0.3-1,0.5-1.5,0.6c0,0,0,0-0.1,0c0.1,0.3,0.3,0.5,0.4,0.8  c0.3,0.8,0.5,1.7,0.7,2.6c0,0.2,0,0.4,0.1,0.6c0,0,0,0.1-0.1,0.1c-1.1,0.6-2,1.5-2.7,2.4c-0.8,1.1-1.5,2.2-1.9,3.5  c0,0.2-0.1,0.3-0.1,0.5c-0.2-0.4-0.3-0.7-0.5-1.1c-0.9-2.2-1.7-4.5-2.4-6.8c-0.3-1.2-0.6-2.3-1-3.5c-0.2-0.6-0.1-1.2,0.1-1.8  c0.4-1,0.9-2,1.4-2.9c1.2-2.1,2.6-4.2,4-6.1C5.9,8,6.2,7.7,6.4,7.4C6.8,7,7.2,6.7,7.7,6.5c1-0.4,2.1-0.8,3.1-1.2  c2.4-0.8,4.8-1.6,7.1-2.4c1.9-0.7,3.8-1.3,5.6-2.1c0.5-0.2,1-0.5,1.5-0.7c0.1,0,0.1,0,0.2,0c0.9,0,1.8,0.2,2.7,0.3  c1.9,0.4,3.8,0.9,5.6,1.7c1.7,0.7,3.3,1.5,4.7,2.7c0.8,0.6,1.4,1.3,1.9,2.2C40.1,7,40.1,7,40.2,7c-0.4,0.4-0.8,0.7-1.2,1.1  C38.2,9,37.6,10,37.2,11c-0.8,1.6-1.4,3.3-2,5.1c-0.5,1.5-1.1,3.1-1.7,4.6c-1,2.2-2.4,4.1-4.3,5.6c-1.6,1.3-3.5,2.3-5.4,3.1  c-1,0.4-2,0.8-3.1,1.2c-0.8,0.3-1.4,0.8-2,1.3c-1.1,0.9-2.1,1.8-3.2,2.7c-0.9,0.7-2,1.4-3.1,1.7C11,36.7,9.7,36.7,8.5,36  c-1.2-0.6-2-1.5-2.4-2.8c-0.3-1-0.2-2.1,0.2-3.1c0.5-1.2,1.3-2.2,2.2-3c1.3-1.2,2.8-2.2,4.4-3c0.8-0.4,1.7-0.8,2.5-1.2  c0.1,0,0.1-0.1,0.2-0.1c1.1-1.4,2.1-2.8,3.2-4.2c0.6-0.8,1.3-1.4,1.9-2.2C20.9,16.3,21.1,16.2,21.2,16z"/>
					<path id="coin" d="M4.2,34C4.5,34.5,4.8,35,5,35.4c0.9,1.4,2.1,2.3,3.6,2.7c1.4,0.5,2.9,0.3,4.3-0.1c1.4-0.5,2.7-1.2,3.9-2.1  c0.7-0.5,1.3-1.1,1.9-1.6c0,0,0.1-0.1,0.1-0.1c0.5,0.5,0.9,1.1,1.2,1.7c0.8,1.5,1.1,3.1,1.1,4.8c-0.1,2.2-0.8,4.1-2.2,5.7  c-1.5,1.8-3.3,2.8-5.5,3.3C11.2,50.2,9,50,7,48.9c-2.5-1.3-4.1-3.4-4.8-6.2c-0.5-2.2-0.3-4.3,0.6-6.3c0.4-0.8,0.8-1.6,1.3-2.3  C4.1,34.1,4.2,34.1,4.2,34z"/>
				</svg><br/>
				<span class="smallFont">https://paypal.me/jacmoli</span>
			</a>
		</p>
		
	</div>


</div>




</body>
</html>
